input {
    file {
        type => "glance"
        start_position => "beginning"
        path => ["/var/log/glance/api.log",
                 "/var/log/glance/registry.log"]
    }

    file {
        type => "keystone"
        start_position => "beginning"
        path => "/var/log/keystone/keystone.log"
    }

    file {
        type => "nova"
        start_position => "beginning"
        path => ["/var/log/nova/nova-consoleauth.log",
                 "/var/log/nova/nova-api.log",
                 "/var/log/nova/nova-cert.log",
                 "/var/log/nova/nova-conductor.log",
                 "/var/log/nova/nova-manage.log",
                 "/var/log/nova/nova.log",
                 "/var/log/nova/nova-scheduler.log",
                 "/var/log/nova/nova-objectstore.log"]
    }
  
    file {
        type => "apache-access"
        start_position => "beginning"
        path => ["/var/log/apache2/access.log",
                 "/var/log/apache2/other_vhosts_access.log"]
    }

    file {
        type => "apache-error"
        start_position => "beginning"
        path => [
            "/var/log/apache2/error.log"
        ]
    }

    file {
        type => "rabbitmq"
        start_position => "beginning"
        path => [
            "/var/log/rabbitmq/rabbit@node-2.log",
            "/var/log/rabbitmq/rabbit@node-2-sasl.log"
        ]
    }

   file {
        type => "libvirt"
        start_position => "beginning"
        path => [
            "/var/log/libvirt/libvirtd.log"]
    }

    file {
        type => "horizon"
        start_position => "beginning"
        path => [
            "/var/log/horizon/dashboard.log",
            "/var/log/horizon/horizon.log"]
    }

    file {
        type => "ceilometer"
        start_position => "beginning"
        path => [
            "/var/log/ceilometer/ceilometer-agent-central.log",
            "/var/log/ceilometer/ceilometer-alarm-evaluator.log",
            "/var/log/ceilometer/ceilometer-alarm-notifier.log",
            "/var/log/ceilometer/ceilometer-api.log",
            "/var/log/ceilometer/ceilometer-collector.log",
            "/var/log/ceilometer/ceilometer-dbsync.log"]
    }

    file {
        type => "cinder"
        start_position => "beginning"
        path => [
            "/var/log/cinder/cinder-api.log",
            "/var/log/cinder/cinder-manage.log",
            "/var/log/cinder/cinder-scheduler.log",
            "/var/log/cinder/cinder-volume.log"]
    }

    file {
        type => "heat"
        start_position => "beginning"
        path => [
            "/var/log/heat/heat-api.log",
            "/var/log/heat/heat-api-cfn.log",
            "/var/log/heat/heat-api-cloudwatch.log",
            "/var/log/heat/heat-engine.log",
            "/var/log/heat/heat-manage.log"]
    }

  file {
        type => "savanna"
        start_position => "beginning"
        path => [
            "/var/log/savanna/savanna-api.log"]
    }
}

filter {

    grok {
        patterns_dir => "./patterns/"
        type => "glance"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER:response}%{SPACE} %{AUDITLOGLEVEL:level} \[%{PROG:program}\] %{GREEDYDATA:message}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "keystone"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{PROG:program}\]: %{GREEDYDATA:message}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "nova"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "quantum"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{SPACE} %{LOGLEVEL:level} \[%{PROG:program}\] %{GREEDYDATA:message}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "apache-access"
        pattern => "%{COMBINEDAPACHELOG}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "apache-error"
        pattern => "\[%{APACHE_DATETIME_ERROR:timestamp}\] \[%{APACHE_LOG_LEVEL:level}\] %{GREEDYDATA:message}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "rabbitmq"
        pattern => "=%{LOGLEVEL:level} REPORT==== %{RABBITMQ_DATE:timestamp} ==="
    }

    grok {
        patterns_dir => "./patterns/"
        type => "libvirt"
        pattern => "%{TIMESTAMP_ISO8601:timestamp}: %{NUMBER:code}: %{LOGLEVEL:level} : %{GREEDYDATA:message}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "horizon"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{PROG:program}\]: %{GREEDYDATA:message}"
    }
 
    grok {
        patterns_dir => "./patterns/"
        type => "ceilometer"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{PROG:program}\]: %{GREEDYDATA:message}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "cinder"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{PROG:program}\]: %{GREEDYDATA:message}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "heat"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{PROG:program}\]: %{GREEDYDATA:message}"
    }

    grok {
        patterns_dir => "./patterns/"
        type => "savanna"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{PROG:program}\]: %{GREEDYDATA:message}"
    }

    multiline {
        type => "glance"
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }

    multiline {
        type => "keystone"
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }

    multiline {
        type => "nova"
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }

    multiline {
        type => "rabbitmq"
        pattern => "^="
        negate => true
        what => "previous"
    }
}

output {

  elasticsearch {
    # Setting 'embedded' will run  a real elasticsearch server inside logstash.
    # This option below saves you from having to run a separate process just
    # for ElasticSearch, so you can get started quicker!
    embedded => true
  }
}

